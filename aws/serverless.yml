# serverless.yml
service: all-data-exporter-service

provider:
  name: aws
  runtime: nodejs16.x
  region: us-west-2
  stage: ${opt:stage, "development"}

  environment:
    CACHE_TABLE: ${self:service}-${self:provider.stage}-cacheTable
    CACHE_BUCKET: ${self:service}-${self:provider.stage}-cache-bucket

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CACHE_TABLE}"
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: "arn:aws:s3:::${self:provider.environment.CACHE_BUCKET}/*"

functions:
  getExportedData:
    handler: source/main.getExportedData
    events:
      - http:
          path: getExportedData
          method: get
          cors: true
  getExportedDataList:
    handler: source/main.getExportedDataList
    events:
      - http:
          path: getExportedDataList
          method: get
          cors: true

resources:
  Resources:
    cacheTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CACHE_TABLE}
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
    cacheBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: Private
        BucketName: ${self:provider.environment.CACHE_BUCKET}

